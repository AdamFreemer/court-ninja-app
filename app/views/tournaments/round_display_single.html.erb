<div class="bg-white">
  <div class="max-w-full mx-auto py-10 px-6 sm:px-6 lg:px-8">
    <div class="text-center">
      <h1 class="text-3xl font-extrabold text-gray-900 sm:text-center">Round <%= @round %></h1>
    </div>

    <div class="pt-3 text-6xl text-center font-medium text-gray-900">
    
      <div class="timer">
        <span class="minute"></span>:<span class="second"></span>
      </div>
    </div>

    <div class="mt-12 sm:mt-8 sm:space-y-0 sm:gap-6 lg:max-w-4xl lg:mx-auto xl:max-w-none xl:mx-0">
      <div class="border border-gray-500 rounded-lg shadow-sm divide-y divide-gray-200">
        <div class="p-6">
          <h2 class="text-xl text-center font-medium text-gray-900">Court <%= @court %></h2>
          <table class="min-w-full divide-y divide-gray-300">
            <thead class="bg-gray-50">
            <% team_count = [*1..@tournament.matches.where(court: @court).first.teams.first.users.count - 1] %>
              <tr>
                <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">Set</th>
                <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">Team 1</th>
                <% team_count.each do |team_1| %>
                  <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">&nbsp;</th>
                <% end %>
                <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">&nbsp;</th>
                <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">Team 2</th>
                <% team_count.each do |team_2| %>
                  <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">&nbsp;</th>
                <% end %>
                <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">&nbsp;</th>
                <th scope="col" class="px-1 py-3.5 text-left text-md font-semibold text-gray-600">Working</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% @court_matches.each do |match| %>
                <% team1 = match.teams.first.users %>
                <% team2 = match.teams.second.users %>
                <% work_team = match.teams.last.users %>
                <% if @tournament.current_set == match.number %>
                  <tr class="font-extrabold divide-x divide-gray-300 shadow-md">
                <% else %>
                  <tr class="font-normal divide-x divide-gray-300">
                <% end %>
                  <td class="px-2 py-3.5 text-left text-md text-gray-600"><%= match.number %></td>
                  <% team1.each do |player| %>
                    <td class="px-2 py-3.5 text-left text-md text-gray-600"><%= player.name_abbreviated %></td>
                  <% end %>  
                  <th scope="col" class="px-1 py-3.5 text-left text-md font-normal text-gray-600">&nbsp;</th>      
                  <% team2.each do |player| %>
                    <td class="px-2 py-3.5 text-left text-md text-gray-600"><%= player.name_abbreviated %></td>
                  <% end %>                         
                  <th scope="col" class="px-2 py-3.5 text-left text-md text-gray-900">&nbsp;</th>
                  <% work_team.each do |player| %>
                    <td class="px-2 py-3.5 text-left text-md text-gray-600"><%= player.name_abbreviated %></td>
                  <% end %>                                      
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>
  
    </div>
    <div class="float-left space-x-4 space-y-3">
      <button class="btn btn-outline btn-primary btn-sm" onClick="timer.start(1000)">Start</button> 
      <button class="btn btn-outline btn-primary btn-sm" onClick="timer.stop()">Stop</button> 
      <button class="btn btn-outline btn-primary btn-sm" onClick="timer.reset(60)">Reset</button> 
    </div> 
  </div>
</div>

<script>
  function _timer(callback) {
      var time = 20;     //  The default time of the timer
      var mode = 0;     //    Mode: count up or count down
      var status = 0;    //    Status: timer is running or stoped
      var timer_id;    //    This is used by setInterval function
      
      // this will start the timer ex. start the timer with 1 second interval timer.start(1000) 
      this.start = function(interval) {
          interval = (typeof(interval) !== 'undefined') ? interval : 1000;
          if(status == 0) {
            status = 1;
            timer_id = setInterval(function() {
              switch(mode) {
                default:
                if(time) {
                  time--;
                  generateTime();
                  if(typeof(callback) === 'function') callback(time);
                }
                break;
                
                case 1:
                if (time < 86400) {
                  time++;
                  generateTime();
                  if(typeof(callback) === 'function') callback(time);
                }
                break;
              }
            }, interval);
          }
      }
      //  Same as the name, this will stop or pause the timer ex. timer.stop()
      this.stop = function() {
        if(status == 1) {
          status = 0;
          clearInterval(timer_id);
        }
      }
      // Reset the timer to zero or reset it to your own custom time ex. reset to zero second timer.reset(0)
      this.reset = function(sec) {
        sec = (typeof(sec) !== 'undefined') ? sec : 0;
        time = sec;
        generateTime(time);
      }
      
      // Change the mode of the timer, count-up (1) or countdown (0)
      this.mode = function(tmode) {
        mode = tmode;
      }
      
      // This methode return the current value of the timer
      this.getTime = function() {
        return time;
      }
      
      // This methode return the current mode of the timer count-up (1) or countdown (0)
      this.getMode = function() {
        return mode;
      }
      
      // This methode return the status of the timer running (1) or stoped (1)
      this.getStatus
      {
          return status;
      }
      
      // This methode will render the time variable to hour:minute:second format
      function generateTime()
      {
        var second = time % 60;
        var minute = Math.floor(time / 60) % 60;
        var hour = Math.floor(time / 3600) % 60;
        
        second = (second < 10) ? '0'+second : second;
        minute = (minute < 10) ? +minute : minute;
        hour = (hour < 10) ? '0'+hour : hour;
        
        $('div.timer span.second').html(second);
        $('div.timer span.minute').html(minute);
        $('div.timer span.hour').html(hour);
      }
  }

  var timer;
  $(document).ready(function(e) {
      timer = new _timer(
        function(time) {
          if(time == 0) {
            timer.stop();
            alert('time out');
          }
        }
      );
      timer.reset(300);
  });
</script>


 

