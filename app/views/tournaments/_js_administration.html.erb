<script>
  function timerOperation(operation) {
    console.log('== operation: ' + operation)
    url = "/tournaments/timer_operation/<%= @tournament.id %>/" + operation
    $.ajax({
      type: "POST",
      url: "/tournaments/timer_operation",
      beforeSend: function(jqXHR, settings) {
        jqXHR.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
      },
      data: {
        id: <%= @tournament.id %>,
        operation: operation,
      },
      success: function (response) {
        console.log('== timer operation response: ' + response.timer_status)
      }
    })
  };

  function display(court) {
    if (court == 'all') {
      window.open("/tournaments/display_double/<%= @tournament.id %>/<%= round %>")
    } else {
      window.open("/tournaments/display_single/<%= @tournament.id %>/<%= round %>/" + court)
    }
  };

  function updateScores(finalize) {
    var score_data = $('input[name^=team-]').map(function(idx, elem) {
      return { team_id: $(elem).attr('id'), score: $(elem).val() }
    }).get();

    event.preventDefault();

    $.ajax({
        type: "POST",
        url: "/tournaments/<%= @tournament.id %>/team_scores_update",
        beforeSend: function(jqXHR, settings) {
          jqXHR.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
        },
        data: { score_data, finalize },
        success: function (response) {
          if (finalize == 'update') {
            $('#update-scores').addClass("loading")
            location.reload();
          } else {
            $('#finalize-round').addClass("loading")
            window.location.href = "/tournament/process_round/<%= @tournament.id %>/<%= round %>";
          }
        }
    })
  };



  // This code runs the timer on the round display pages
  // It also has the ringer bell that goes off at 30s and 0s.
  // This needs to be refactored into ES6 from the cryptic old js it written in from where taken.
  function _timer(callback) {
      var time = 20;     //  The default time of the timer
      var mode = 0;     //    Mode: count up or count down
      var status = 0;    //    Status: timer is running or stoped
      var timer_id;    //    This is used by setInterval function

      // this will start the timer ex. start the timer with 1 second interval timer.start(1000)
      this.start = function(interval) {
          interval = (typeof(interval) !== 'undefined') ? interval : 1000;
          if(status == 0) {
            status = 1;
            timer_id = setInterval(function() {
              switch(mode) {
                default:
                if(time) {
                  time--;
                  generateTime();
                  if(typeof(callback) === 'function') callback(time);
                }
                break;

                case 1:
                if (time < 86400) {
                  time++;
                  generateTime();
                  if(typeof(callback) === 'function') callback(time);
                }
                break;
              }
            }, interval);
          }
      }
      //  Same as the name, this will stop or pause the timer ex. timer.stop()
      this.stop = function() {
        if(status == 1) {
          status = 0;
          clearInterval(timer_id);
        }
      }
      // Reset the timer to zero or reset it to your own custom time ex. reset to zero second timer.reset(0)
      this.reset = function(sec) {
        sec = (typeof(sec) !== 'undefined') ? sec : 0;
        time = sec;
        generateTime(time);

      }

      // Change the mode of the timer, count-up (1) or countdown (0)
      this.mode = function(tmode) {
        mode = tmode;
      }

      // This methode return the current value of the timer
      this.getTime = function() {
        return time;
      }

      // This methode return the current mode of the timer count-up (1) or countdown (0)
      this.getMode = function() {
        return mode;
      }

      // This methode return the status of the timer running (1) or stoped (1)
      this.getStatus
      {
          return status;
      }

      // This methode will render the time variable to hour:minute:second format
      function generateTime()
      {
        var second = time % 60;
        var minute = Math.floor(time / 60) % 60;
        var hour = Math.floor(time / 3600) % 60;

        second = (second < 10) ? '0'+second : second;
        minute = (minute < 10) ? +minute : minute;
        hour = (hour < 10) ? '0'+hour : hour;

        $('div.timer span.second').html(second);
        $('div.timer span.minute').html(minute);
        $('div.timer span.hour').html(hour);
      }
  }

  var timer;

  function timer_bell() {
    var audio = document.getElementById("audio");
    audio.play();
  }

  function activeTimerPolling() {
    // noteworthy is we're not checking set / match as on the display page
    $.ajax({
        type: "GET",
        url: "/tournaments/<%= @tournament.id %>/status",
        beforeSend: function(jqXHR, settings) {
          jqXHR.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
        },
        success: function (response) {
          const currentSet = document.querySelector('#current-set');

          if (response.timer_status == "start") {
            timer.start();
          } else if (response.timer_status == "reset") {
            timer.stop();
            timer.reset(<%= @tournament.tournament_time * 60 %>);
          }
        }
    })
    setTimeout(activeTimerPolling, 3000);
  }

  // $(document).ready(function(e) {
  //   timer = new _timer(
  //     function(time) {}
  //   );

  //   // make sure timer is reset on load
  //   // first on server
  //   timerOperation('reset');
  //   // then on page
  //   timer.stop();
  //   timer.reset(<%= @tournament.tournament_time * 60 %>);

  //   // dial home for scoring updates and timer operation status
  //   activeTimerPolling();
  // });
</script>